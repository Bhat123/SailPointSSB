<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow configForm="Provisioning Workflow Config Form" explicitTransitions="true" handler="sailpoint.api.StandardWorkflowHandler" libraries="Identity,BatchRequest" name="AllState-Workflow-EmployeeUserOnboarding" taskType="LCM" type="LCMIdentity">
  <Variable input="true" name="identityName">
    <Description>The name of the identity we're supposed to update.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="identityModel">
    <Description>To represent identity</Description>
  </Variable>
  <Variable name="confirmationForm">
    <Description>
      A form that gets displayed for confirming the onboarding details.
    </Description>
  </Variable>
  <Variable input="true" name="httpSession" transient="true">
    <Description>httpSession</Description>
  </Variable>
  <Variable initializer="identityModel" name="workItemFormBasePath">
    <Description>Used for passing identitymodel to form</Description>
  </Variable>
  <Variable initializer="false" input="true" name="endOnManualWorkItems">
    <Description>Option to skip requests with manual work items.</Description>
  </Variable>
  <Variable initializer="false" input="true" name="endOnProvisioningForms">
    <Description>Option to skip requests with provisioning forms.</Description>
  </Variable>
  <Variable input="true" name="batchRequestItemId">
    <Description>
      Used by the batch interface to record back individual request item status. The specific item id for the individual request in the batch file.
    </Description>
  </Variable>
  <Variable input="true" name="plan">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable initializer="IdentityCreateRequest" name="flow">
    <Description>
      The name of the LCM flow that launched this workflow.
      This is one of these two values:
      IdentityCreateRequest
      IdentityEditRequest
    </Description>
  </Variable>
  <Variable editable="true" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to
      see the results of the request.
    </Description>
  </Variable>
  <Variable editable="true" name="doRefresh">
    <Description>
      Set to true to cause an identity refresh after the changes in the plan
      have been provisioned.  This is normally off, you might want this on
      if you want modification of identity or link attributes to result in
      an immediate re-evaluation of assigned and detected roles.
    </Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>
      The String veAllStateon of a WorkItem.Priority. This variable is
      used to set the priority on all of the workitems generated
      as part of this workflow and also set on the IdentityRequest
      object.
    </Description>
  </Variable>
  <Variable initializer="user,requester" input="true" name="notificationScheme">
    <Description>
      A string that specifies who should be notified when the request has been complete.
      The value can be null or a csv of one or more of the following options.
      none or null
      disable notifications
      user
      Identity that is being update will be notified.
      manager
      The manager of the Identity that is being updated will be notified.
      requester
      The person that has requested the update will be notified.
    </Description>
  </Variable>
  <Variable initializer="LCM User Notification" input="true" name="userEmailTemplate">
    <Description>
      The email template to use for user notification.
    </Description>
  </Variable>
  <Variable initializer="LCM Requester Notification" input="true" name="requesterEmailTemplate">
    <Description>
      The email template to use for requester notification.
    </Description>
  </Variable>
  <Variable initializer="LCM Manager Notification" input="true" name="managerEmailTemplate">
    <Description>
      The email template to use for manager notification.
    </Description>
  </Variable>
  <Variable input="true" name="securityOfficerEmailTemplate">
    <Description>
      The email template to use for security officer notification.
    </Description>
  </Variable>
  <Variable initializer="serial" input="true" name="approvalMode">
    <Description>
      A string that specifies how we should handle the approvals.
      By default this is serial since most of these request with
      the exception of manager transfers will have only one approver.
      parallel
      Approvals are processed concurrently and there must be consensus,
      we wait for all approvers to approve.  The first approver that
      rejects terminates the entire approval.
      parallelPoll
      Approvals are processed concurrently but consensus is not required.
      All approvals will be processed, we don't stop if there are any
      rejections.
      serial
      Approvals are processed one at a time and there must be consensus.
      The first approver that rejects terminates the entire approval.
      serialPoll
      Approvals are processed in order but consensus is not required.
      All approvals will be processed, we don't stop if there are any
      rejections.  In effect we are "taking a poll" of the approvers.
      any
      Approvals are processed concurrently, the first approver to
      respond makes the decision for the group.
    </Description>
  </Variable>
  <Variable name="errorMessage"/>
  <Variable initializer="manager, newManager" input="true" name="approvalScheme">
    <Description>
      A String that specifies how approvals should be generated for
      this workflow there are three built-in modes
      none - disabled approvals
      manager - The user's current manager will get approvals
      newManager - The newly assigned manager will get approvals when
      manager transfers occur. Otherwise the user's manager
      current manager will be the approver.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will
      be assigned any approvals where the owner of the approver
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM Identity Update Approval" input="true" name="approvalEmailTemplate">
    <Description>
      The email template to use for approval notifications.
    </Description>
  </Variable>
  <Variable input="true" name="securityOfficerName">
    <Description>
      The name of the identity that will be sent approvals
      during security officer approvals.
    </Description>
  </Variable>
  <Variable initializer="continue" input="true" name="policyScheme">
    <Description>
      A String that specifies how policy checks effect the overall
      process.
      none - disabled policy checking
      fail -  fail and exit the workflow if any policy violations are found
      continue -  continue if policy violations are found
    </Description>
  </Variable>
  <Variable input="true" name="ticketManagementApplication">
    <Description>
      Name of the application that can handle ticket requests.
      When non-null the Manage Ticket Steps will be visited to open
      tickets during the workflow lifecycle.
    </Description>
  </Variable>
  <Variable name="statusFailed"/>
  <Variable name="ticketId">
    <Description>
      The id of the ticket that is generated by the ticketingManagementApplication.
      This is typically generated on the "open" call, and then used in subsequent
      calls.  It is also stored on the IdentityRequest object under the
      ContractorTicketId variable.
    </Description>
  </Variable>
  <Variable input="true" name="policiesToCheck">
    <Description>
      A List of policies that should be checked. If this list is
      empty all violations will be checked. Used in combination
      with policyScheme.
    </Description>
  </Variable>
  <Variable name="policyViolations">
    <Description>
      List of policy violations that were found during our initial policy scan.
      This list is passed into each work item so the approvers can see
      pending violations.
    </Description>
  </Variable>
  <Variable name="upn">
    <Description>
      upn name 
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String veAllStateon of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable name="approvalSet">
    <Description>
      This attributes is set during the "Build Approval Set" step,
      which builds this list by going through the ProvisioningPlan
      to build the line items that need to be approved,
      This variable includes all ApprovalItems that are part of
      the request process and is updated during the AfterScript
      of the approval process by assimilating the decisions
      and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable initializer="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled veAllStateon of the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="approvalForm">
    <Description>
      The form that is generated based on the changes that were made.  This
      form will be sent into the workitem and allow editing of the
      requested values during the approval process. This is generated
      in "Build Approval Form" based on the passed-in plan.
    </Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>
      The sequence id of the Identity request object which is stored in
      the name field of the identity request.
    </Description>
  </Variable>
  <Variable input="true" name="approverElectronicSignature">
    <Description>
      The name of the electronic signature object that should be used when workitems
      are completed by the batch approver when performing batch operations.
    </Description>
  </Variable>
  <Variable initializer="true" name="transient"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Approval Library"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
    <Reference class="sailpoint.object.Rule" name="AllState-RuleLibrary-Common"/>
  </RuleLibraries>
  <Step action="getIdentityModel" icon="Start" name="Start" posX="18" posY="128" resultVariable="identityModel">
    <Arg name="identityName" value="ref:identityName"/>
    <Transition to="Invite Contractor User"/>
  </Step>
  <Step name="Invite Contractor User" posX="195" posY="290">
    <Approval name="AllState-Form-InviteEmployeeUser" owner="ref:launcher" return="identityModel" send="requester">
      <Arg name="launcher" value="ref:launcher"/>
      <Arg name="workItemFormBasePath" value="identityModel"/>
      <Arg name="workItemForm" value="AllState-Form-InviteEmployeeUser"/>
      <Form name="AllState-Form-InviteEmployeeUser">
        <Attributes>
          <Map>
            <entry key="pageTitle" value="Invite Contractor User"/>
            <entry key="subtitle" value="Enter the details for Onboarding the Contractor Users"/>
            <entry key="title" value="Contractor User Invitation Form"/>
          </Map>
        </Attributes>
        <Description>This interface is for alliance manager to invite Contractor users to Sailpoint</Description>
        <FormRef name="AllState-Form-InviteEmployeeUser"/>
      </Form>
    </Approval>
    <Arg name="identityModel" value="ref:identityModel"/>
    <Arg name="workItemFormBasePath" value="identityModel"/>
    <Transition to="Build Confirmation Form"/>
  </Step>
  <Step action="call:buildReadOnlyForm" name="Build Confirmation Form" posX="131" posY="10" resultVariable="confirmationForm">
    <Arg name="form" value="AllState-Form-InviteEmployeeUser"/>
    <Arg name="helpText" value="lcm_registration_confirmation_text"/>
    <Arg name="nextButtonLabel" value="label_confirm"/>
    <Description>
       Create the confirmation form to be displayed.
    </Description>
    <Transition to="Confirmation Form"/>
  </Step>
  <Step icon="Approval" name="Confirmation Form" posX="269" posY="10">
    <Approval mode="serial" owner="ref:launcher" return="identityModel">
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemDescription" value="Confirmation form"/>
      <Arg name="workItemForm" value="ref:confirmationForm"/>
      <Arg name="workItemFormBasePath" value="identityModel"/>
    </Approval>
    <Description>
       Display the confirmation form to the registrant.
    </Description>
    <Transition to="Get Data from Identity Model"/>
  </Step>
  <Step icon="Default" name="Get Data from Identity Model" posX="584" posY="292">
    <Arg name="identityModel" value="ref:identityModel"/>
    <Script>
      <Source><![CDATA[
         import org.apache.log4j.Logger;
		 import org.apache.log4j.Level;
		 Logger logger = Logger.getLogger("com.CustomLog.Logging");
		 logger.debug("Identity Model is"+ identityModel);
      
      ]]></Source>
    </Script>
    <Transition to="Create Plan"/>
  </Step>
  <Step name="Create Plan" posX="646" posY="6">
    <Script>
      <Source><![CDATA[
         import org.apache.log4j.Logger;
		 import org.apache.log4j.Level;
		 import sailpoint.api.Provisioner;
		 Logger logger = Logger.getLogger("com.CustomLog.Logging");
		 //ProvisioningPlan planNew = createContractorPlanForSailpoint(identityModel, launcher);
		 ProvisioningPlan planNew = createEmployeePlanForSailpoint(identityModel, launcher);
		 logger.debug("planNew  is"+ planNew);
		 wfcontext.setVariable("plan",planNew) ;
		 if(plan != null) {
			 logger.debug("plan  is"+ plan.toXml());
			
		 }
      ]]></Source>
    </Script>
    <Transition to="Add Success Message"/>
  </Step>
  <Step name="Add Success Message">
    <Script>
      <Source><![CDATA[  
	import javax.faces.application.FacesMessage;  
	// httpSession variable passed in from QuickLink attribute script. Used to get current session message list. Can add to, or overwrite  
	List currentMessages = httpSession.getAttribute("sailpoint.web.PageCodeBase.sessionMessages");  
	FacesMessage myMessage = new FacesMessage(FacesMessage.SEVERITY_INFO, "Your invitation request has been successfully submitted. You can check the invitation in IGA from Quicklink Menu", "This is ignored");  
	List myMessages = new ArrayList();  
	myMessages.add(myMessage);  
	// Overwrite current message list  
	httpSession.setAttribute("sailpoint.web.PageCodeBase.sessionMessages", myMessages);  
    ]]></Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="508" posY="146">
    <Arg name="formTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="endOnManualWorkItems" value="ref:endOnManualWorkItems"/>
    <Arg name="policiesToCheck" value="ref:policiesToCheck"/>
    <Arg name="project"/>
    <Arg name="workItemComments"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="identityRequest"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="batchRequestItemId" value="ref:batchRequestItemId"/>
    <Arg name="endOnProvisioningForms" value="ref:endOnProvisioningForms"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="policyViolations"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="asyncCacheRefresh"/>
    <Arg name="optimisticProvisioning" value="false"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into
      a project and checking policy violations.
    </Description>
    <Return name="policyViolations" to="policyViolations"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Task" name="Provision" posX="599" posY="147">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="approvalScheme" value="ref:approvalScheme"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes"/>
    <Arg name="workItemComments"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyViolations" value="ref:policyViolations"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="splitProvisioning"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="AllStateRequestType"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="recompile" value="false"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
      Call the standard subprocess that will process the
      approval decisions and do provisioning.  This
      includes calling any configured provisioning
      connectors and building manual actions.
    </Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" condition="ref:doRefresh" icon="Task" name="Refresh Identity" posX="785" posY="144">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="provision" value="true"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="synchronizeAttributes" value="true"/>
    <Description>
      Add arguments as necessary to enable refresh features.  Typically you only want this
      to correlate roles and possibly provision if we notice new assigned roles.
      Note that provisioning will be done in the Identity Refresh workflow so if there
      are any provisioning forms to display we won't feed them directly to the
      current user, they'll have to return to the inbox.
    </Description>
    <Transition to="Finalize"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Finalize" posX="28" posY="10">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="batchRequestItemId" value="ref:batchRequestItemId"/>
    <Arg name="autoVerifyIdentityRequest"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketDataGenerationRule"/>
    <Arg name="statusFailed" value="ref:statusFailed"/>
    <Arg name="errorMessage" value="ref:errorMessage"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="919" posY="6"/>
</Workflow>