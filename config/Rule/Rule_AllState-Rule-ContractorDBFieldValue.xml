<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="AllState-Rule-ContractorDBFieldValue" type="FieldValue">
  <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="AllState-RuleLibrary-Common"/>
  </ReferencedRules>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
      <Argument name="link" type="Link">
        <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
      </Argument>
      <Argument name="group" type="ManagedAttribute">
        <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="project" type="ProvisioningProject">
        <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
      </Argument>
      <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
        <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
        <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="role" type="Bundle">
        <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="application" type="Application">
        <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="template" type="Template">
        <Description>
          The Template that contains this field.
        </Description>
      </Argument>
      <Argument name="field" type="Field">
        <Description>
          The current field being computed.
        </Description>
      </Argument>
      <Argument name="current" type="Object">
        <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
      </Argument>
      <Argument name="operation" type="ProvisioningPlan.Operation">
        <Description>
          The operation being performed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[//This rule is used to provide values to different fields in AD Provisioning Policy
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;
  import sailpoint.object.PasswordPolicy;
  import sailpoint.api.PasswordGenerator;


  Logger logger = Logger.getLogger("com.CustomLog.Logging");


  logger.debug("In Contractor DB field Value Rule");
 
  //This is rule to populate the attributes to be provisioned in AD
  
  //Field value for Contractor ID
  if(field != null && field.getName().equalsIgnoreCase("userID"))
  {
    logger.debug("id is"+ identity.getName());
    return identity.getName();
  }

 //Field value for firstname
  if(field != null && field.getName().equalsIgnoreCase("firstname"))
  {
    logger.debug("id is"+ identity.getAttribute("firstname"));
    return identity.getAttribute("firstname");
  }

 //Field value for lastname
  if(field != null && field.getName().equalsIgnoreCase("lastname"))
  {
    logger.debug("lastname is"+  identity.getAttribute("lastname"));
    return identity.getAttribute("lastname");
  }

 //Field value for enddate
  if(field != null && field.getName().equalsIgnoreCase("enddate"))
  {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
	String datenew = sdf.format(identity.getAttribute("ctrexpDt"));
    logger.debug("enddate is"+ datenew);
    return datenew;
  }

 //Field value for email ID
  if(field != null && field.getName().equalsIgnoreCase("email"))
  {
    logger.debug("email is"+ identity.getAttribute("email"));
    return identity.getAttribute("email");
  }

 //Field value for middlename
  if(field != null && field.getName().equalsIgnoreCase("middlename"))
  {
    logger.debug("middlename is"+ identity.getAttribute("middleName"));
    return identity.getAttribute("middleName");
  }

 //Field value for contractorSponsorManager 
  if(field != null && field.getName().equalsIgnoreCase("contractorSponsorManager"))
  {
	Identity mgrIdentity = identity.getManager();
	String managerName ;
	if(mgrIdentity != null) {
		logger.debug("mgrIdentity is" + mgrIdentity.getDisplayName() );	
		managerName  = mgrIdentity.getDisplayName();
	}
    logger.debug("contractorSponsorManager is"+ managerName);
    return managerName;
  }

 //Field value for contractorStatus
  if(field != null && field.getName().equalsIgnoreCase("contractorStatus"))
  {
    logger.debug("contractorStatus is A");
    return "A";
  }

 //Field value for contractorAssignmentManager
  if(field != null && field.getName().equalsIgnoreCase("contractorAssignmentManager"))
  {
	
    logger.debug("contractorAssignmentManager is "+ identity.getAttribute("ctrMgr"));
    return identity.getAttribute("ctrMgr");
  }

 //Field value for creationDate
  if(field != null && field.getName().equalsIgnoreCase("creationDate"))
  {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
	Date dateC = new Date();
	String dateCurrent = sdf.format(dateC);
	logger.debug("creationDate is"+ dateCurrent);
    return dateCurrent;
  }

//Field value for lastUpdateDate
  if(field != null && field.getName().equalsIgnoreCase("lastUpdateDate"))
  {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
	Date dateC = new Date();
	String dateCurrent = sdf.format(dateC);
	logger.debug("lastUpdateDate is"+ dateCurrent);
    return dateCurrent;
  }




  
  ]]></Source>
</Rule>