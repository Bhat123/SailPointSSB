<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="AllState-Rule-ProvisioningContractorDB" type="JDBCProvision">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
                The application whose data file is being processed.
                </Description>
      </Argument>
      <Argument name="schema">
        <Description>
                The Schema currently in use.
                </Description>
      </Argument>
      <Argument name="connection">
        <Description>
                A connection object to connect to database.
                </Description>
      </Argument>
      <Argument name="plan">
        <Description>
                The ProvisioningPlan created against the JDBC application.
                </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>
                A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan
                </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.PermissionRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
import sailpoint.tools.xml.XMLObjectFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
Logger logger = Logger.getLogger("com.CustomLog.Logging");

logger.debug("Inside the Provisioning Rule of JDBC");
//To get the attribute Request from the plan
public String getAttributeRequestValue(AccountRequest acctReq, String attribute) {
if ( acctReq != null ) {
		AttributeRequest attrReq = acctReq.getAttributeRequest(attribute);
		if ( attrReq != null ) {
		return attrReq.getValue();
		}
	}
return null;
}


ProvisioningResult result = new ProvisioningResult();
if ( plan != null ) {
		logger.debug( "plan [" + plan.toXml() + "]" );
		List accounts = plan.getAccountRequests();
		if ( ( accounts != null ) && ( accounts.size() > 0 ) ) {
			for ( AccountRequest account : accounts ) {
				try {
						if ( AccountRequest.Operation.Create.equals( account.getOperation() ) ) {
						//Ideally we should first check to see if the account already exists.
						//As written, this just assumes it does not.
						logger.debug( "Operation [" + account.getOperation() + "] detected." );
						PreparedStatement statement = connection.prepareStatement( "insert into appsdb.contractor_identity (firstname,lastname,userID,enddate,email,middlename,contractorStatus,contractorSponsorManager,contractorAssignmentManager,creationDate,lastUpdateDate) values (?,?,?,?,?,?,?,?,?,?,?)");
						statement.setString ( 1, getAttributeRequestValue(account,"firstname") );
						statement.setString ( 2, getAttributeRequestValue(account,"lastname") );
						statement.setString ( 3, getAttributeRequestValue(account,"userID") );
						statement.setString ( 4, getAttributeRequestValue(account,"enddate") );
						statement.setString ( 5, getAttributeRequestValue(account,"email") );
						statement.setString ( 6, getAttributeRequestValue(account,"middlename") );
						statement.setString ( 7, getAttributeRequestValue(account,"contractorStatus") );
						statement.setString ( 8, getAttributeRequestValue(account,"contractorSponsorManager") );
						statement.setString ( 9, getAttributeRequestValue(account,"contractorAssignmentManager") );
						statement.setString ( 10, getAttributeRequestValue(account,"creationDate") );
						statement.setString ( 11, getAttributeRequestValue(account,"lastUpdateDate") );
						statement.executeUpdate();
						result.setStatus( ProvisioningResult.STATUS_COMMITTED );
						}  
						
						if ( AccountRequest.Operation.Modify.equals( account.getOperation() ) ) {
						//Ideally we should first check to see if the account already exists.
						//As written, this just assumes it does not.
						logger.debug( "Operation [" + account.getOperation() + "] detected." );
						PreparedStatement statement = connection.prepareStatement( "UPDATE appsdb.contractor_identity SET firstname = ?, lastname = ?, enddate = ?, email = ? , middlename = ? , contractorStatus = ?, contractorSponsorManager = ? , contractorAssignmentManager = ? , lastUpdateDate = ? WHERE userID = ?");
						statement.setString ( 1, getAttributeRequestValue(account,"firstname") );
						statement.setString ( 2, getAttributeRequestValue(account,"lastname") );
						statement.setString ( 3, getAttributeRequestValue(account,"enddate") );
						statement.setString ( 4, getAttributeRequestValue(account,"email") );
						statement.setString ( 5, getAttributeRequestValue(account,"middlename") );
						statement.setString ( 6, getAttributeRequestValue(account,"contractorStatus") );
						statement.setString ( 7, getAttributeRequestValue(account,"contractorSponsorManager") );
						statement.setString ( 8, getAttributeRequestValue(account,"contractorAssignmentManager") );
						statement.setString ( 9, getAttributeRequestValue(account,"lastUpdateDate") );
						statement.setString ( 10,getAttributeRequestValue(account,"userID") );
						statement.executeUpdate();
						result.setStatus( ProvisioningResult.STATUS_COMMITTED );
						}  
					}
					catch( SQLException e ) {
					logger.error( e );
					
					result.setStatus( ProvisioningResult.STATUS_FAILED );
					result.addError( e );
					}
				}
			}
		}
		logger.debug( "result [" + result.toXml(false)+ "]");
		return result;]]></Source>
</Rule>