<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="AllState-Rule-FrameWork-Creation-Joiner-Authoritative-Source" type="IdentityCreation">
  <Description>
    Creation rule
  </Description>
  <Signature returnType="Map">
    <Inputs>
      <Argument name="log">
        <Description>
         Log
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to
          query the database to aid in correlation.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
      <Argument name="account">
        <Description>
          A sailpoint.object.ResourceObject returned from the
          collector.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
          Identity Object
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source><![CDATA[
    
    import sailpoint.rapidapponboarding.rule.AggregationRuleLibrary;
    import sailpoint.rapidapponboarding.rule.ObjectConfigAttributesRuleLibrary;
    import sailpoint.rapidapponboarding.rule.JoinerRuleLibrary;
	import sailpoint.rapidapponboarding.logger.LogEnablement;
	import sailpoint.object.Attributes;
	import sailpoint.object.Identity;
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	Log aggLogger = LogFactory.getLog("rapidapponboarding.rules");
	String serviceAccountEnabled = ObjectConfigAttributesRuleLibrary.extendedAttrServiceAccountEnabled(context);
	boolean servAccEnabled=false;
	if(serviceAccountEnabled!=null && serviceAccountEnabled.length()>0 && serviceAccountEnabled.equalsIgnoreCase("TRUE"))
	{
		servAccEnabled=true;
	}
	
	
	//Create GUID 
	
	//Generating the GUID of the user
  String UID = "E";
  String charList = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  boolean flagNew = true;
  while(flagNew)
  {
    Random random = new Random();
    boolean flag = true;
    int counter = 0;
    while(flag)
    {
      if(counter==2) {        
        flag = false;
      }
      char c = charList.charAt(random.nextInt(charList.length()));
      //Adding two random characters at the end of the UID
      String characterString = Character.toString(c);
      aggLogger.debug("check for duplicate character "+ UID.contains(characterString) );
      if(!UID.contains(characterString) )
      {
        UID = UID + characterString;
        aggLogger.debug("UID after adding the characters"+UID);
        counter = counter + 1;
      }
    }
    String userPin = String.format("%04d", random.nextInt(10000));
    //Adding 4 random digits at the end of the UID
    UID = UID + userPin;
    Identity duplicateUIDIdentity = context.getObjectByName(Identity.class,UID);
    if((null == duplicateUIDIdentity)) {
      flagNew = false;
    }
  }
  aggLogger.debug("UID generated is "+ UID);
  identity.setName(UID);
	//Set Joiner Flag
    identity.setAttribute(JoinerRuleLibrary.JOINERATTRNEEDSJOINER,JoinerRuleLibrary.JOINERNEEDPROCESSING);
    //Let's Run Application Specific Rule Here
	HashMap params = new HashMap();
	params.put("context", context);
	params.put("environment", environment);
	params.put("application", application);
	params.put("account", account);
	params.put("identity", identity);
	 //Identity TYPE ENABLED
	String identityTypeEnabled = ObjectConfigAttributesRuleLibrary.extendedAttrIdentityTypeEnabled(context);
	boolean identityTypeEnab=false;
	if(identityTypeEnabled!=null && identityTypeEnabled.length()>0 && identityTypeEnabled.equalsIgnoreCase("TRUE"))
	{
		identityTypeEnab=true;
	}
	//Set Identity as Contractor based on Contractor Repository
	boolean contractorRepo=false;
	Attributes attrs = application.getAttributes();
	String repoName="authoritativeNonEmployee";
	if (attrs != null && attrs.containsKey(repoName) && attrs.get(repoName) != null && ((String) attrs.get(repoName)).equalsIgnoreCase("True")) 
	{
		LogEnablement.isLogDebugEnabled(aggLogger,"Type..Contractor Account Repository");
		if(identityTypeEnab)
	     {
	    	LogEnablement.isLogDebugEnabled(aggLogger,"Type..Contractor");
	    	contractorRepo=true;
	      }
	}
	if(servAccEnabled)
	{
		repoName="authoritativeServiceAccount";
		if (attrs != null && attrs.containsKey(repoName) && attrs.get(repoName) != null && ((String) attrs.get(repoName)).equalsIgnoreCase("True")) 
		{
			LogEnablement.isLogDebugEnabled(aggLogger,"Type..Service Account Repository");
			//IdentityIQ 7.2+
			identity.setAttribute("serviceCube", "TRUE");
			 if(identityTypeEnab)
		     {
		    	LogEnablement.isLogDebugEnabled(aggLogger,"Type..Service");
		    	//IdentityIQ 7.3+
		     	identity.setType("service");
			  }
		}
	}
	repoName="authoritativeEmployee";
	boolean employeeRepo=false;
	if (attrs != null && attrs.containsKey(repoName) && attrs.get(repoName) != null && ((String) attrs.get(repoName)).equalsIgnoreCase("True")) 
	{
		LogEnablement.isLogDebugEnabled(aggLogger,"Type..Employee Account Repository");
		 if(identityTypeEnab)
	     {
	    	LogEnablement.isLogDebugEnabled(aggLogger,"Type..Employee");
	    	//IdentityIQ 7.3+
	    	employeeRepo=true;
	  	  }
	}
	//Repository can be authoritative source for both Employees and Contractors
	//In this case User Type must be set using Identity Mappings
	if(!employeeRepo && contractorRepo)
	{
	 	identity.setType("contractor");
	}
	else if(employeeRepo && !contractorRepo)
	{
	 	identity.setType("employee");
	}
	else if(employeeRepo && contractorRepo)
	{
		LogEnablement.isLogDebugEnabled(aggLogger,"Please Set..User Type.. Using Identity Mappings");
	}
	AggregationRuleLibrary.runApCreationRule(context,application,identity,params);
  
  ]]></Source>
</Rule>